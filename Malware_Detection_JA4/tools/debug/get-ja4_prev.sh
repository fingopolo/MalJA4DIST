#!/bin/bash

# get-ja4.sh <PCAP>  [-a <AppName>] [-v <version>] [-t <type:0 (normal) | M (malware) | A (analytics)>] [-d <output DIR>] [-w <whois file>]
#
# Extracts TLS/QUIC data from a PCAP file and creates JA4 a JA4S fingerprints, for IPv4 only.
#
# Modified to use ja4.py instead of tls2ja4.pl


JA4PY="tools/ja4.py"
APPNAME="Unknown"
VERSION="0"
TYPE="0"

if [ $# -lt 1 -o $# -gt 11 ]; then
    echo "Usage: $0 <PCAP file> [-a <AppName>] [-v <version>] [-t <type:0 (normal) | M (malware) | A (analytics)>] [-d <output DIR>] [-w <whois file>]"
    exit 1;
fi

if [ ! -r "$1" ]; then
    echo "Cannot read file \"$1\""
    exit 1;
else
    INFILE=$1
    FILENAME=$(basename "$1" | sed -e "s/.[p]*cap.*//")
fi

shift 1
while getopts ":a:v:t:d:w:" options; do
    case ${options} in
    a)
        APPNAME=${OPTARG}
        ;;
    v)
        VERSION=${OPTARG}
        ;;
    t)
        TYPE=${OPTARG}
        if [[ ! ${TYPE} =~ [a|A|m|M|0] ]]; then 
            echo "Unknown type '${TYPE}' -- use 0 (normal traffic), M (malware) or A (analytics)"
            exit 1;
        fi
        TYPE=${TYPE^}
        ;;
    d)
        OUTDIR=${OPTARG}
        if [ ! -d $OUTDIR ]; then
            echo "Cannot access output directory \"$OUTDIR\""
            exit 1;
        fi
        ;;
    w)
        WHOISFILE=${OPTARG}
        if [ ! -r ${WHOISFILE} ]; then
            echo "Cannot read file \"${WHOISFILE}\""
            exit 1;
        fi
        ;;
    \?)
        echo "Error: Invalid argument -${OPTARG}"
        exit 1;;
    esac    
done

if [ -z ${OUTDIR} ]; then
    OUTDIR=$(dirname "${INFILE}")
fi

echo "Processing file \"${INFILE}\" ..."
echo "Output will be saved into \"${OUTDIR}/\" directory ..."

OUTFILE=${FILENAME}-extracted.csv

if [ ! -f "${OUTDIR}/${OUTFILE}" ]; then 
    echo "Processing TLS traffic ..."
    echo "SrcIP;DstIP;TCP SrcPort;TCP DstPort;UDP SrcPort; UDP DstPort;Proto;Type;Ver;Ciphersuite;List of extensions;SNI;Supported Groups;EC;ALPN;Signature Algorithms;Supported Versions;Time" > "${OUTDIR}/${OUTFILE}"
    tshark -r "${INFILE}" -T fields -E separator=";" -e ip.src -e ip.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport -e ip.proto -e tls.handshake.type -e tls.handshake.version -e tls.handshake.ciphersuite -e tls.handshake.extension.type -e tls.handshake.extensions_server_name -e tls.handshake.extensions_supported_group -e tls.handshake.extensions_ec_point_format -e tls.handshake.extensions_alpn_str -e tls.handshake.sig_hash_alg -e tls.handshake.extensions.supported_version -e frame.time -R "tls.handshake.type==1 or tls.handshake.type==2" -2 >> "${OUTDIR}/${OUTFILE}"
    
    if [ $? -ne 0 ]; then
        echo "Error 1: SSL/TLS processing failed."
        exit 1;
    fi
fi

TLSJA4=${FILENAME}-ja4.csv

if [ ! -f "${OUTDIR}/${TLSJA4}" ]; then
    echo "Saving JA4 fingerprints into ${OUTDIR}/${TLSJA4}"
    if [ -r ${WHOISFILE} ]; then
        python3 ${JA4PY} -f "${OUTDIR}/${OUTFILE}" -app "${APPNAME}" -ver "${VERSION}" -type "${TYPE}" -whois "${WHOISFILE}" > "${OUTDIR}/${TLSJA4}"
    else
        python3 ${JA4PY} -f "${OUTDIR}/${OUTFILE}" -app "${APPNAME}" -ver "${VERSION}" -type "${TYPE}" > "${OUTDIR}/${TLSJA4}"
    fi
    
    if [ $? -ne 0 ]; then
        echo "Error 2: TLS JA4 processing failed."
        exit 1;
    fi
fi