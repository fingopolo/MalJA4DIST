from hashlib import sha256
import csv
import subprocess

# Función para calcular el hash truncado
def sha_encode(values):
    if not values:  # Si el valor está vacío, devolver 12 ceros
        return "0" * 12
    if isinstance(values, list):
        return sha256(','.join(values).encode('utf-8')).hexdigest()[:12]
    else:
        return sha256(values.encode('utf-8')).hexdigest()[:12]

def http_language(lang):
    if not lang:
        return "0000"
    lang = lang.replace('-', '').replace(';', ',').lower().split(',')[0]
    lang = lang[:4]
    return f"{lang}{'0'*(4-len(lang))}"

def http_method(method):
    if not method:
        return None
    return method.lower()[:2]

# Función para construir la huella JA4h
def compute_ja4h(method, version, cookie, referer, headers, accept_lang):
    # 1. Método HTTP
    method = http_method(method)
    if not method:
        return None

    # 2. Versión HTTP
    version_map = {"HTTP/2.0": "20", "HTTP/1.1": "11", "HTTP/1.0": "10"}
    version = version_map.get(version, "xx")  # "xx" si no coincide

    # 3. Flags de cookie y referer
    cookie_flag = "c" if cookie else "n"
    referer_flag = "r" if referer else "n"

    # 4. Contar headers excluyendo 'cookie' y 'referer'
    headers_list = [h for h in headers if h.lower() not in ['cookie', 'referer']]
    headers_count = f"{len(headers_list):02d}"

    # 5. Primeros 4 caracteres de Accept-Language
    accept_lang = http_language(accept_lang)

    # 6. Hashes truncados
    print(f"headers {headers_list}")
    hash_headers = sha_encode(headers_list)
    hash_cookie_fields = sha_encode(cookie.split(';')) if cookie else sha_encode("")
    hash_cookie_values = sha_encode(cookie + referer) if cookie and referer else sha_encode("")

    # 7. Formar la huella JA4h
    ja4h = f"{method}{version}{cookie_flag}{referer_flag}{headers_count}{accept_lang}_{hash_headers}_{hash_cookie_fields}_{hash_cookie_values}"
    return ja4h

# Comando tshark para extraer los campos necesarios
tshark_cmd = [
    "tshark", "-r", "/media/fingopolo/Maxtor/TFG/DATASET1/Malware-Dridex/2017-12-04-Dridex-infection-traffic.pcap", "-Y", "http", "-T", "fields",
    "-e", "ip.src", "-e", "ip.dst", "-e", "tcp.srcport", "-e", "tcp.dstport",
    "-e", "http.request.method", "-e", "http.request.version",
    "-e", "http.cookie", "-e", "http.referer",
    "-e", "http.accept_language", "-e", "http.accept",
    "-e", "http.user_agent", "-e", "http.accept_encoding",
    "-e", "http.host", "-e", "http.connection",
    "-E", "separator=\t"
]

# Escribir los resultados en un archivo CSV
with open("ja4h_huellas.csv", "w", newline="") as csvfile:
    csv_writer = csv.writer(csvfile, delimiter=";")
    csv_writer.writerow(["ip.src", "ip.dst", "tcp.srcport", "tcp.dstport", "ja4h"])  # Cabecera CSV

    process = subprocess.Popen(tshark_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    for line in process.stdout:
        fields = line.strip().split("\t")
        if len(fields) < 12:  # Asegúrate de que haya suficientes campos
            continue

        # Extraer campos
        ip_src, ip_dst, src_port, dst_port, method, version, cookie, referer, accept_lang, accept, user_agent, accept_encoding, host, connection = fields

        # Crear una lista de headers HTTP
        headers = [
            f"Accept: {accept}" if accept else "",
            f"Accept-Language: {accept_lang}" if accept_lang else "",
            f"User-Agent: {user_agent}" if user_agent else "",
            f"Accept-Encoding: {accept_encoding}" if accept_encoding else "",
            f"Host: {host}" if host else "",
            f"Connection: {connection}" if connection else "",
        ]
        headers = [h for h in headers if h]  # Eliminar campos vacíos

        # Solo procesar si es HTTP
        if method:  # Si hay un método HTTP, es una solicitud HTTP
            ja4h = compute_ja4h(method, version, cookie, referer, headers, accept_lang)
            if ja4h:
                csv_writer.writerow([ip_src, ip_dst, src_port, dst_port, ja4h])

print("Huellas JA4H calculadas y guardadas en 'ja4h_huellas.csv'")